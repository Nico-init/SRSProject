# Docker
# Build a Docker image
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- webapp

resources:
- repo: self

variables:
  imageBackend: flask-back-end-test
  imageReact: react-image-test
  tag: '$(Build.BuildId)'

stages:

############Backend
- stage: BuildBackend
  displayName: Build Backend image
  dependsOn: []
  jobs:
  - job: BuildBackend
    displayName: Build Backend
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: Docker@2
      displayName: Build Backend
      inputs:
        containerRegistry: 'niccolo-AzureContainer-connection'
        repository: '$(imageBackend)'
        command: 'buildAndPush'
        Dockerfile: '$(Build.SourcesDirectory)/Dockerfile.flask'
        tags: |
          $(tag)
    
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.SourcesDirectory)/kubernetes/flask-service-deploy.yaml'
        artifact: 'backend-manifest'
        publishLocation: 'pipeline'

###########React
- stage: BuildReact
  displayName: Build React image
  dependsOn: []
  jobs:
  - job: BuildReact
    displayName: Build React
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: Docker@2
      displayName: Build React
      inputs:
        containerRegistry: 'niccolo-AzureContainer-connection'
        repository: '$(imageReact)'
        command: 'buildAndPush'
        Dockerfile: '$(Build.SourcesDirectory)/Dockerfile.react'
        tags: |
          $(tag)
    
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.SourcesDirectory)/kubernetes/react-balancer-deploy.yaml'
        artifact: 'react-manifest'
        publishLocation: 'pipeline'


#####DEPLOYMENTS####################################################################################################
############reddit

############Flask-Backend
- stage: DeployBackend
  displayName: Deploy Backend to Dev
  dependsOn: BuildBackend
  variables: 
    acrsecret: k8sexamplesacrauth
    acrdevurl: 'nrregistry.azurecr.io'
  jobs:
    - deployment: DeployBackend
      displayName: Deploy Backend to AKS
      environment: niccolo-aks-environment.webapp-space
      pool:
        vmImage: ubuntu-latest
      strategy:
       runOnce:
         deploy:
          steps:     
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: 'backend-manifest'
              targetPath: '$(Pipeline.Workspace)/backend-manifest'
          - task: KubernetesManifest@0
            inputs:
              action: 'createSecret'
              #kubernetesServiceConnection: 'niccolo-AKS-connection'
              namespace: 'webapp-space'
              secretType: 'dockerRegistry'
              secretName: '$(acrsecret)'
              dockerRegistryEndpoint: 'niccolo-AzureContainer-connection'
          - task: KubernetesManifest@0
            inputs:
              action: 'deploy'
              #kubernetesServiceConnection: 'niccolo-AKS-connection'
              namespace: 'webapp-space'
              manifests: |
                $(Pipeline.Workspace)/backend-manifest/flask-service-deploy.yaml
              containers: '$(acrdevurl)/$(imageBackend):$(tag)'


############React-Deployment
- stage: DeployReact
  displayName: Deploy React to Dev
  dependsOn: BuildReact
  variables: 
    acrsecret: k8sexamplesacrauth
    acrdevurl: 'nrregistry.azurecr.io'
  jobs:
    - deployment: DeployReact
      displayName: Deploy React to AKS
      environment: niccolo-aks-environment.webapp-space
      pool:
        vmImage: ubuntu-latest
      strategy:
       runOnce:
         deploy:
          steps:     
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: 'react-manifest'
              targetPath: '$(Pipeline.Workspace)/react-manifest'
          - task: KubernetesManifest@0
            inputs:
              action: 'createSecret'
              #kubernetesServiceConnection: 'niccolo-AKS-connection'
              namespace: 'webapp-space'
              secretType: 'dockerRegistry'
              secretName: '$(acrsecret)'
              dockerRegistryEndpoint: 'niccolo-AzureContainer-connection'
          - task: KubernetesManifest@0
            inputs:
              action: 'deploy'
              #kubernetesServiceConnection: 'niccolo-AKS-connection'
              namespace: 'webapp-space'
              manifests: |
                $(Pipeline.Workspace)/react-manifest/react-balancer-deploy.yaml
              containers: '$(acrdevurl)/$(imageReact):$(tag)'